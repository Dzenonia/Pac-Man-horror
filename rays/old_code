 //        QRadialGradient gradient(controller_->getLights()[countLights - 1], 400);
        //
        //        //        QLinearGradient gra(
        //        //            currentLightsAreas_[countLights - 1]->boundingRect().topLeft(),
        //        //            currentLightsAreas_[countLights - 1]->boundingRect().bottomRight()
        //        //        );
        //        //        gra.setCenter(controller_->getLights()[countLights - 1]);
        //        //        gra.setColorAt(0, QColor(Qt::black));
        //        //        gra.setColorAt(1, QColor(Qt::red));
        //        gradient.setColorAt(0, QColor(255, 255, 255, 255));
        //        gradient.setColorAt(1, QColor(255, 255, 255, 0));
        //        //        gra.setRadius(700);
        //        currentLightsAreas_[countLights - 1]->setBrush(gradient);
        //        auto vec = controller_->castRays(light);
        //        controller_->intersectRays(vec);
        //        controller_->removeAdjacentRays(vec, 1);
        //        auto vec = controller_->createLightArea();
        //
        //        qDebug() << "I will draw: " << vec[0].getVertices() << countLights;
        //
        //
        //        for (int i = 0; i < countLights; ++i) {
        //            QList<QPointF> list;
        //            for (const QPointF& point : vec[i].getVertices()) {
        //                list.push_back(point);
        //            }
        //            qDebug() << list;
        //            currentLightsAreas_[i]->setPolygon(QPolygonF(list));
        //            lightsSources_[i]->setRect(
        //                controller_->getLights()[i].x(), controller_->getLights()[i].y(), 5, 5
        //            );
        //            //            currentLightsAreas_[i]->setBrush(Qt::white);
        //        }


        //        for (auto& val : needToDel_) {
        //            scene_->removeItem(val);
        //            delete val;
        //        }
        //        needToDel_.clear();
        //        auto vec = controller_->castRays(controller_->getLightSource());
        //        controller_->intersectRays(vec);
        //        controller_->removeAdjacentRays(vec);
        //        for (int i = 0; i < vec.size(); ++i) {
        //            auto ray = vec[i];
        //            if (ray == std::nullopt) {
        //                continue;
        //            }
        //            QGraphicsLineItem* line = new QGraphicsLineItem(
        //                ray->getBegin().x(), ray->getBegin().y(), ray->getEnd().x(),
        //                ray->getEnd().y()
        //            );
        //            line->setPen(QPen(QColor(Qt::white)));
        //            view_->scene()->addItem(line);
        //            needToDel_.push_back(line);
        //            //            view_->scene()->addLine(
        //            //                ray.getBegin().x(), ray.getBegin().y(), ray.getEnd().x(),
        //            //                ray.getEnd().y(), QPen(QColor(Qt::white))
        //            //            );
        //        }
        //        for (const auto& polygon : controller_->getPolygons()) {
        //            for (const auto& point : polygon.getVertices()) { }
        //        }
    });


    //    delete paint;

    //    setAttribute(Qt::WA_Hover);

    //    setMouseTracking(true);

    //    setLayout(layout_);

    //    scene_->setSceneRect(0, 0, 400, 400);
    //    qDebug() << controller_->getLightSource();
    //    resize(minimal_size_);
    //    setMinimumSize(minimal_size_);
    //
    //    add_plot_button_->setText("Add new plot");
    //
    //    ConnectWidgets();
    //
    //    layout_->setRowStretch(0, 10);
    //    layout_->setRowStretch(1, 1);
    //
    //    layout_->setColumnStretch(0, 3);
    //    layout_->setColumnStretch(1, 10);
    //
    //    layout_->addWidget(list_widget_, 0, 0);
    //    layout_->addWidget(add_plot_button_, 1, 0);
    //    layout_->addWidget(paint_widget_, 0, 1);
    //    layout_->addWidget(plot_descriptor_, 1, 1);
    //
    //    widget_->setLayout(layout_);
    //
    //    setCentralWidget(widget_);

    //    timer->start(100, this);


    // void GraphicsScene::mouseMoveEvent(QMouseEvent* event) {
    //     //    QPainter paint(this);
    //     //    scene()->setSceneRect(0, 0, scene()->width(), scene()->height());
    //     scene()->removeItem(currentCursor_);
    //     setSceneRect(0, 0, QWidget::width(), QWidget::height());
    //     recheckCursor();
    //     auto point = mapFromGlobal(cursor().pos());
    //     qDebug() << point << cursor().pos();
    //     scene()->addItem(currentCursor_);
    //     //    scene()->addEllipse(0, 0, 10, 10, QPen(), Qt::yellow);
    //     //    paint.save();
    //     //    paint.setBrush(Qt::yellow);
    //     //    paint.drawEllipse(/*controller_->getLightSource() */ cursor().pos(), 5, 5);
    //     //    paint.restore();
    // }
    //
    // void GraphicsScene::recheckCursor() {
    //     delete currentCursor_;
    //     auto point = mapFromGlobal(cursor().pos());
    //     currentCursor_ = new QGraphicsEllipseItem(point.x(), point.y(), 10, 10);
    //     currentCursor_->setBrush(Qt::yellow);
    // }

    // void MainWindow::createLightArea(double opacity) {
    //     const auto& areas = controller_->createLightArea();
    //     const auto& lights = controller_->getLights();
    //     for (int i = 0; i < countLights; ++i) {
    //         currentAreas_[i]->setPolygon(areas[i]);
    //         QRadialGradient gradient(lights[i], 400);
    //         gradient.setColorAt(0, QColor(255, 0, 0, 10));
    //         gradient.setColorAt(1, QColor(255, 0, 0, 100));
    //         currentAreas_[i]->setBrush(gradient);
    //         currentAreas_[i]->setOpacity(opacity);
    //     }
    // }
    //
    // void MainWindow::createEllipseLights(double radius) {
    //     const auto& lights = controller_->getLights();
    //     for (int i = 0; i < countLights; ++i) {
    //         lightsSources_[i]->setRect(lights[i].x(), lights[i].y(), radius, radius);
    //     }
    // }

    // void MainWindow::mouseMoveEvent(QMouseEvent* event) {
    //     qDebug() << mapFromGlobal(QCursor::pos());
    // }
    //
    // bool MainWindow::eventFilter(QObject* obj, QEvent* event) {
    //     if (obj == centralWidget() && event->type() == QEvent::MouseMove) {
    //         qDebug() << "here";
    //         mouseMoveEvent(static_cast<QMouseEvent*>(event));
    //         return true;
    //     }
    //     return QMainWindow::eventFilter(obj, event);
    // }

    //
    // void MainWindow::setupScene() {
    //    view_->setScene(scene_);
    //}

    // bool MainWindow::eventFilter(QObject* watched, QEvent* event) {
    //     qDebug() << 3;
    //     if (event->type() == QEvent::MouseMove) {
    //         qDebug() << 2;
    //     }
    //     return QObject::eventFilter(watched, event);
    // }

    // bool MainWindow::event(QEvent* event) {
    //     if (event->type() == QEvent::MouseMove) {
    //         qDebug() << 2;
    //     }
    // }